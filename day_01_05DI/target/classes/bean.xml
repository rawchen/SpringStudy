<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降级程序间的耦合（依赖关系）
        依赖关系的管理：
            以后都交给了spring来维护
        在当前类中需要用到其它类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护：
            就称之为依赖注入。
        依赖注入：
            能注入的数据有三类：
                基本类型和string
                其他bean类型（在配置文件中或者注解配置过的bean）
                复杂类型/集合类型
            注入的方式有三种：
                第一种：使用构造函数提供
                第二种：使用set方法
                第三种：使用注解提供
    -->

    <!-- 构造函数注入：
        使用constructor-arg
        便签出现的位置：bean标签的内部
        标签中的属性：
            type：用于指定要注入的数据的数据类型，也是构造函数中某些参数的类型
            index：用指定要注入的数据给构造函数中的指定索引位置的参数赋值，索引从0开始
            name：用于指定给构造函数中指定名称的参数赋值  （常用的）
            ==================以上三个用于指定给构造函数中哪个参数赋值=============
            value：用于提供基本类型和String类型的数据
            ref：用于指定其它的bean类型数据，它指的就是在spring的IOC核心容器中出现过的bean对象

        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据也必须提供。
    -->
    <bean id="accountService" class="com.yoyling.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="泰雷瑟"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <!-- 配置一个日期对象 -->
    <bean id="now" class="java.util.Date"></bean>

    <!-- set方法注入（更常用）
        涉及的标签：property
        出现的位置：bean标签的内部
        标签的属性：
            name：用于指定注入时所调用的set名称
            value：用于提供基本类型和String类型的数据
            ref：用于指定其它的bean类型数据，它指的就是在spring的IOC核心容器中出现过的bean对象
        优势：
            创建对象时，没有明确限制，可直接使用默认构造函数
        弊端：
            如果有某个成员必须有值，则获取对象时有可能set方法没有执行。
    -->
    <bean id="accountService2" class="com.yoyling.service.impl.AccountServiceImpl2">
        <property name="name" value="test"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!-- 复杂类型的注入/集合类型的注入 -->
    <bean id="accountService3" class="com.yoyling.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <property name="myList">
            <list>
                <value>AAAList</value>
                <value>BBBList</value>
                <value>CCCList</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>AAASet</value>
                <value>BBBSet</value>
                <value>CCCSet</value>
            </set>
        </property>

        <property name="myMap">
            <map>
                <entry key="a" value="AAAMap"></entry>
                <entry key="b">
                    <value>BBBMap</value>
                </entry>
            </map>
        </property>
    </bean>


</beans>